from bs4 import BeautifulSoup
from typing import List
import requests

def scrape_state_news(state: str) -> List[str]:
    """
    Scrapes news content from Times of India for a specific state.
    Args:
        state (str): Name of the state.
    Returns:
        List[str]: List of news headlines containing the state name.
    """
    # Convert state name to lowercase and replace spaces with hyphens for URL
    state_for_url = state.lower().replace(" ", "-")
    url = f"https://timesofindia.indiatimes.com/india/{state_for_url}"

    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
    }

    try:
        print(f"Fetching news for state: {state}")
        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()

        soup = BeautifulSoup(response.text, 'html.parser')
        news_items = []

        # Find all news article links
        article_links = soup.find_all('a', href=True)

        # Prepare state variations for filtering, including abbreviations like UP
        state_variations = [
            state.lower(),
            state.replace(" ", "-").lower(),
            state.capitalize(),
            state.upper(),
            state[:2].upper()  # Handling abbreviations like UP
        ]

        # Filter for articles containing the state name
        for link in article_links:
            news_text = link.get_text().strip()
            if (
                    '/articleshow/' in link['href']
                    and len(news_text) > 30  # Filter out short links
                    and any(state_var in news_text.lower() for state_var in state_variations)  # Check for state name
            ):
                news_items.append(news_text)

        # Return all found news items
        return list(dict.fromkeys(news_items))  # Removing duplicates

    except requests.RequestException as e:
        print(f"Error fetching news: {e}")
        return []
    except Exception as e:
        print(f"Unexpected error: {e}")
        return []

# Function to be called from Kotlin
def get_news_for_state(state: str) -> List[str]:
    return scrape_state_news(state)

def get_state_acronyms(state: str) -> List[str]:
    """ Returns a list of common acronyms and variations for a state. """

    # First, split the state name into words
    words = state.lower().split()

    # Acronyms generated by the first letter of each word
    acronym = ''.join([word[0] for word in words]).upper()

    # Additional variations
    state_variations = [state.lower(), state.capitalize(), acronym]

    # Generate acronym-based variations (e.g., first two letters)
    if len(words) > 1:
        acronym_short = words[0][0] + words[1][0]  # First letter of first two words
        state_variations.append(acronym_short.upper())

    return state_variations

# Example usage:
